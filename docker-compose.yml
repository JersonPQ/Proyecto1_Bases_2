version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_DB_USER: postgres
      POSTGRES_DB_PASSWORD: postgres
      POSTGRES_DB_NAME: encuesta
      POSTGRES_DB_HOST: postgredb
      POSTGRES_DB_PORT: 5432
      MONGO_DB_USER: root
      MONGO_DB_PASSWORD: example
      MONGO_DB_HOST: mongo
      MONGO_DB_PORT: 27017

      REDIS_DB_HOST: redis
      REDIS_DB_PORT: 6379

      KAFKA_BROKER: kafka:29092

      KAFKA_TOPIC_SPARK_RESPONSES: sparkResponses
      KAFKA_TOPIC_SPARK_SURVEYS: sparkSurveys

    ports:
      - 5000:5000
    networks:
      - web
    depends_on:
      - postgredb
      - mongo
      - redis
      - zookeeper
      - kafka
    volumes:
      - .:/opt/app
    command: poetry run python3 -m flask --app app.py --debug run --host=0.0.0.0

# kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - web

  kafka:
    image: confluentinc/cp-server:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8083
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

    ports:
      - '9092:9092'
      - '9101:9101'
    networks:
      - web

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    restart: always
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - 8083:8083
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8083
    networks:
      - web

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: control-center
    hostname: control-center
    depends_on:
      - kafka
      - schema-registry
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:29092
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8083
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - web
  
  postgredb:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    networks:
      - web
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./database/postgre/:/docker-entrypoint-initdb.d/
      - postgres_data:/var/lib/postgresql/data  # Persist data

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    networks:
      - web
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    networks:
      - web
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  redis:
    image: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - web


  superset:
    build:
      context: .
      dockerfile: Dockerfile.superset
    restart: always
    ports:
      - 8088:8088
    environment:
      SUPERSET_LOAD_EXAMPLES: 'no'
      SUPERSET_SECRET_KEY: 'thisISaSECRET_1234'
      SQLALCHEMY_DATABASE_URI: 'postgresql://postgres:postgres@postgredb:5432/encuesta'
    networks:
      - web
    depends_on:
      - postgredb
# Neo4J
  neo4j:
    image: neo4j:4.4-community
    hostname: server1
    networks:
      - web
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_AUTH=neo4j/password

networks:
  web:
    driver: bridge

volumes:
  postgres_data:
  superset_home:
  superset_config:
